name: Hprofile Actions
on: [push,workflow_dispatch]
env:
  AWS_REGION: us-east-1
  ECR_REPO: action-app
  ECS_SERVICE_NAME: vproapp-act-svc1
  ECS_CLUSTER_NAME: vproapp-act  
  ECS_TASK_DEFINATION: aws-files/taskdeffile.json
  CONTAINER_NAME: vproapp


jobs: 
  Testing:
     runs-on:  ubuntu-latest
     steps: 
       - name: code checkout
         uses: actions/checkout@v4

       - name: Maven tests
         run: mvn test 
        
       - name: checkstyle tests
         run: mvn checkstyle:checkstyle

       - name: use java 17
         uses: actions/setup-java@v2
         with:
           distribution: 'temurin'
           java-version: '17'

       - name: Setup SonarQube
         uses: warchant/setup-sonar-scanner@v7

         # Run sonar-scanner
       - name: SonarQube Scan
         run: sonar-scanner
              -Dsonar.host.url=${{ secrets.SONAR_URL }}
              -Dsonar.login=${{ secrets.SONAR_TOKEN }}
              -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
              -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
              -Dsonar.sources=src/
              -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
              -Dsonar.junit.reportsPath=target/surefire-reports/
              -Dsonar.jacoco.reportsPath=target/jacoco.exec
              -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml

              
        # Check the Quality Gate status.
       - name: SonarQube Quality Gate check
         id: sonarqube-quality-gate-check
         uses: sonarsource/sonarqube-quality-gate-action@master
         # Force to fail step after specific time.
         timeout-minutes: 5
         env:
           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
           SONAR_URL: ${{ secrets.SONAR_URL }} 

  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on:  ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v4
      
      # - name: Update application.properties file
      #   run: |
      #     sed -i "s/^jdbc.username.*$/jdbc.username=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
      #     sed -i "s/^jdbc.password.*$/jdbc.password=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
      #     sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties
        #shell: /bin/bash
        


      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: action-app
          region: ${{ env.AWS_REGION }}
          tag: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./  

  DEPLOY:
    needs: BUILD_AND_PUBLISH
    runs-on:  ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: ${{ env.ECS_TASK_DEFINATION }}
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ secrets.REGISTRY }}/${{ env.ECR_REPO }}:${{ github.run_number }}
  
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v2
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE_NAME }}
            cluster: ${{ env.ECS_CLUSTER_NAME }}
            wait-for-service-stability: true    
    
